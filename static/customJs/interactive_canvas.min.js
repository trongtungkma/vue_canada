
var ud_, ud_a = function (a) { var b = 0; return function () { return b < a.length ? { done: !1, value: a[b++] } : { done: !0 } } }, ud_b = function (a) { var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator]; return b ? b.call(a) : { next: ud_a(a) } }, ud_c = function (a) { if (a instanceof Array) return a; a = ud_b(a); for (var b, c = []; !(b = a.next()).done;)c.push(b.value); return c }, ud_d = this || self, ud_g = function () { var a = window; if (a && a != ud_d) return ud_e(a.document); null === ud_f && (ud_f = ud_e(ud_d.document)); return ud_f }, ud_h = /^[\w+/_-]+[=]{0,2}$/,
    ud_f = null, ud_e = function (a) { return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && ud_h.test(a) ? a : "" }; var ud_j = function (a) {
        var b = ud_i; if (!b.a) {
            var c = a.url; c || (console.warn("Canvas library URL unavailable. Using default library."), c = "https://www.gstatic.com/assistant/interactivecanvas/api/v1.0.2/interactive_canvas.min.js"); var d = document.createElement("script"); d.onload = function () {
                var g = a.headerHeightPx || -1, f = window; if (f.assistantCanvas) {
                    f = f.assistantCanvas; var h = window; f.a = h.assistantCanvasImpl; f.a.a = { headerHeightPx: g }; g = ud_b(f.c); for (var e = g.next(); !e.done; e = g.next()) {
                        e = e.value; e.b && (f.b = e.b); try {
                            e.i.apply(h.assistantCanvas,
                                e.f)
                        } catch (k) { console.error(k) }
                    }
                } else console.error("assistantCanvas object undefined")
            }; d.src = c; if (c = ud_g()) d.nonce = c; document.head.appendChild(d); b.a = !0
        }
    }, ud_k = function () { this.c = [] }; ud_ = ud_k.prototype; ud_.sendTextQuery = function (a, b) { var c = this; return this.a ? this.a.sendTextQuery(a, b) : new Promise(function (d) { ud_l(c, c.h, [a, b], { resolve: d }) }) }; ud_.getHeaderHeightPx = function () { var a = this; return this.a ? this.a.getHeaderHeightPx() : new Promise(function (b) { ud_l(a, a.g, [], { resolve: b }) }) };
ud_.exit = function (a) { this.a ? this.a.exit(a) : ud_l(this, this.exit, [].concat(ud_c(arguments))) }; ud_.onLoad = function (a, b) { if (this.a) this.a.onLoad(a, b); else ud_l(this, this.onLoad, [].concat(ud_c(arguments))) }; ud_.onUpdateDone = function (a) { if (this.a) this.a.onUpdateDone(a); else ud_l(this, this.onUpdateDone, [].concat(ud_c(arguments))) }; ud_.exitApp = function (a) { this.a ? this.a.exitApp(a) : ud_l(this, this.exitApp, [].concat(ud_c(arguments))) }; ud_.ready = function (a) { this.a ? this.a.ready(a) : ud_l(this, this.ready, [].concat(ud_c(arguments))) };
ud_.outputTts = function (a, b) { b = void 0 === b ? !1 : b; if (this.a) return this.a.outputTts(a, b); ud_l(this, this.outputTts, [].concat(ud_c(arguments))); return "" }; ud_.setCanvasState = function (a) { this.a ? this.a.setCanvasState(a) : ud_l(this, this.setCanvasState, [].concat(ud_c(arguments))) }; ud_.openMic = function () { console.warn("API deprecated. Mic can be opened only after a prompt.") }; ud_.closeMic = function () { console.warn("API deprecated.") };
ud_.setGoBackHandler = function (a, b) { this.a ? this.a.setGoBackHandler(a, b) : ud_l(this, this.setGoBackHandler, [].concat(ud_c(arguments))) }; ud_.launchYTApp = function (a) { this.a ? this.a.launchYTApp(a) : ud_l(this, this.launchYTApp, [].concat(ud_c(arguments))) }; var ud_l = function (a, b, c, d) { a.c.push({ i: b, f: c, b: d }) };
ud_k.prototype.h = function (a, b) { var c = this; if (this.b) { var d = this.b; this.b = void 0; this.a.sendTextQuery(a, b).then(function (g) { d.resolve.apply(c, [g]) }) } else console.error("Unable to send text query.") }; ud_k.prototype.g = function () { var a = this; if (this.b) { var b = this.b; this.b = void 0; this.a.getHeaderHeightPx().then(function (c) { b.resolve.apply(a, [c]) }) } else console.error("Unable to get header height.") }; var ud_i = new function () { this.a = !1 }, ud_m = new ud_k, ud_n = window; ud_n.assistantCanvas || (ud_n.assistantCanvas = ud_m); ud_n.assistantHost || (ud_n.assistantHost = ud_m); ud_n.AssistantHost || (ud_n.AssistantHost = ud_m); ud_n.interactiveCanvas || (ud_n.interactiveCanvas = ud_m); window.addEventListener("message", function (a) { var b = a.data; a.source === window.parent && "ImmersiveApiLibUrl" === b.type && (window.clearTimeout(ud_i.c), ud_j(b)) }); window.parent.postMessage({ type: "GetImmersiveApiLibUrl" }, "*");
ud_i.c = window.setTimeout(function () { ud_j({ type: "ImmersiveApiLibUrl", url: "https://www.gstatic.com/assistant/interactivecanvas/api/v1.0.2/interactive_canvas.min.js", headerHeightPx: -1 }) }, 100);

